# 智能汽车诊断系统

该项目通过结合 CAN 信号读取、自然语言处理和知识图谱，实现汽车故障的智能诊断与知识库更新。系统分为三个主要模块：

- `check_update_kg.py`: 提供知识图谱查询与更新功能。
- `model_server.py`: 作为后端服务接收用户请求，调用大语言模型与知识图谱进行诊断处理。
- `can_ui_client.py`: 提供基于 Gradio 的可视化界面，接收用户输入和上传文档，展示诊断结果。

## 功能组成

### 1. 知识图谱模块 (`check_update_kg.py`)

- `check_kg` 类：根据用户问题构建 Cypher 查询，检索 Neo4j 图谱并生成回答。
- `update_kg` 类：将文本资料中的故障信息抽取为结构化知识，更新图谱。

### 2. 模型服务模块 (`model_server.py`)

- 使用 socket 启动后端服务，监听来自客户端的诊断请求。
- 支持用户输入和 CAN 信号联合诊断。
- 若知识图谱中无答案，将调用语言模型进行补充推理并更新图谱。

### 3. 可视化界面模块 (`can_ui_client.py`)

- 读取 BLF 格式 CAN 数据，解析指定信号值。PS.需要改为从can线中读取，由于硬件条件限制无法调试暂时以读取blf文件形式实现，具体可参考read_can.py
- 通过 Gradio 构建诊断界面，可提交问题或上传 `.txt`/`.docx` 文档。
- 实时轮询 CAN 数据，展示最新信号与诊断结果。

### 4. 读取can线模块（'read_can.py'）
- CAN总线实时监控
- DBC文件解析
- 信号过滤与显示

## 使用说明

### 启动步骤
0. 安装kvaser驱动（放文件夹里面了）
1. 启动 `model_server.py`（后端服务）：
   python model_server.py
2. 启动 can_ui_client.py（界面服务）：
   python can_ui_client.py
打开浏览器访问 Gradio 自动生成的界面。


注：
1. 需要被解析的原始知识文件需要与py文件同级
2. 当前neo4j库为特定库，需要原作者开启，可将neo4j相关信息更改为自建库（这个部分找师姐再确认下，她那边开了才能用）